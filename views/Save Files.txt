
        if matricule != "" and pour_ajout == True:
            req = "SELECT * FROM personnel WHERE matricule = ?"
            cursor.execute(req,(matricule,))
            data = cursor.fetchone()
            if not data is None:
                erreur.append("Ce matricule est déjà utilisé pour l'individu nommé " + data[3] + ". Veuillez corriger!")
                
        if npi != "" and pour_ajout == True:
            req = "SELECT * FROM personnel WHERE npi = ?"
            cursor.execute(req,(npi,))
            data = cursor.fetchone()
            if not data is None:
                erreur.append("Ce numéro NPI est déjà utilisé pour" + data[3] + ". Veuillez corriger!")
                

    def afficher_table_personnel(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # sélectionner données
        req = """SELECT * FROM personnel ORDER BY id DESC"""
        cursor.execute(req)
        data = cursor.fetchall() # recupérer les données
        conn.close()
        
        if data is not None:
            row_index = 0
            for row in data:
                for col in range(self.ncol_tableWidget_ui): #afficher toes les colonnes
                    self.ui.tableWidget_personnel.setItem(row_index,col,QTableWidgetItem(str(row[col])))
                row_index = row_index + 1
            
        

    def chercher_personnel(self):
        try:
            chercher = self.ui.txt_chercher.text()
            self.ui.tableWidget_personnel.clearContents() # effacer le visuel de la table et réactualiser
            
            if not chercher == "":
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                
                # sélectionner données
                valeur_like = f"%{chercher}%"
                req = "SELECT * FROM personnel WHERE LOWER(npi || nom || prenom || matricule || date_naissance || telephone1 || telephone2 || adresse || email || url_photo || numero_ifu || numero_cnss || numero_rib) LIKE ?"
                cursor.execute(req,(valeur_like,))
                data = cursor.fetchall() # recupérer les données
                conn.close()
                
                if len(data) > 0:
                    row_index = 0
                    for row in data:
                        for col in range(self.ncol_tableWidget_ui): #afficher toes les colonnes
                            self.ui.tableWidget_personnel.setItem(row_index,col,QTableWidgetItem(str(row[col])))
                        row_index = row_index + 1
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Une erreur est survenue : {str(e)}")
            
                    self.ui.tableWidget_personnel.itemSelectionChanged.connect(self.selectionner_personnel)
        